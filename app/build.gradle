/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1.1/userguide/building_java_projects.html
 */

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.jooq:jooq-codegen:3.15.2'
        classpath 'org.postgresql:postgresql:42.2.23.jre7'
    }
}

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Spark
    implementation 'com.sparkjava:spark-core:2.9.3'
    implementation 'com.google.code.gson:gson:2.8.7'

    // Logger for spark
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.slf4j:slf4j-simple:1.7.32'

    // JOOQ
    implementation 'org.jooq:jooq:3.15.1'
    implementation 'org.jooq:jooq-meta:3.15.1'
    implementation 'org.jooq:jooq-codegen:3.15.1'

    // Postgres driver
    implementation 'org.postgresql:postgresql:42.2.23.jre7'
    
    // Connection pooling 
    implementation 'com.zaxxer:HikariCP:5.0.0'

    // Logger
    implementation 'log4j:log4j:1.2.17'

    // Assertj
    testImplementation "org.assertj:assertj-core:3.20.2"

    // Use JUnit test framework.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'todoapp.App'
}

jar {
  manifest { 
    attributes "Main-Class": "todoapp.App"
  }  
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*

tasks.register('generate') {
    doLast {
        def props = new Properties()
        file("db.properties").withInputStream { 
            stream -> props.load(stream) 
        }

        def url             = props.getProperty('url')
        def user            = props.getProperty('user')
        def password        = props.getProperty('password')
        def directoryPath   = file('src/main/java').absolutePath
        def packageName     = 'todoapp.generated'

        GenerationTool.generate(new Configuration()
            .withJdbc(new Jdbc()
                .withDriver('org.postgresql.Driver')
                .withUrl(url)
                .withUser(user)
                .withPassword(password))
            .withGenerator(new Generator()
                .withDatabase(new Database()
                    .withExcludes("dblink_get_notify|ts.*")
                    .withInputSchema("public"))
                .withGenerate(new Generate()
                    .withPojos(true)
                    .withDaos(true))
                .withTarget(new Target()
                    .withPackageName(packageName)
                    .withDirectory(directoryPath)
                    )
                )
            )
    }
}